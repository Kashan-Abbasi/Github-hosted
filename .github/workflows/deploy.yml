name: CI/CD with GitHub Runner and EC2 Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Docker login to Docker Hub
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker image locally
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} .

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

      # Step 5: Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}           # EC2 public IP
          username: ${{ secrets.USERNAME }}   # EC2 username (e.g., ubuntu)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # PEM private key
          port: 22
          script: |
            # 1. Ensure Docker is installed
            if ! command -v docker &> /dev/null
            then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl enable --now docker
            fi

            # 2. Navigate to app folder or create if missing
            cd /home/ubuntu/Github-hosted || mkdir -p /home/ubuntu/Github-hosted && cd /home/ubuntu/Github-hosted

            # 3. Stop old container safely
            if [ "$(docker ps -q -f name=myapp)" ]; then
              docker stop myapp
            fi
            if [ "$(docker ps -aq -f name=myapp)" ]; then
              docker rm myapp
            fi

            # 4. Pull latest image from Docker Hub
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

            # 5. Run new container
            docker run -d --name myapp -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

            # 6. Cleanup old Docker images
            docker image prune -f


